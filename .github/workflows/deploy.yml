name: Deploy To EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build JAR
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar

      - name: Docker Build & Push
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}

      - name: Generate SSH Key File
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY_BASE64 }}" | base64 -d > private_key.pem
          chmod 600 private_key.pem

      - name: Copy deploy.sh to EC2
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no ./deploy.sh \
          ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/ubuntu/CrystalRose-back/deploy.sh

      - name: Deploy via SSH
        env:
          APPLICATION_YML: ${{ secrets.APPLICATION_YML }}
          APPLICATION_OAUTH2_YML: ${{ secrets.APPLICATION_OAUTH2_YML }}
          SPRING_JWT_SECRET: ${{ secrets.SPRING_JWT_SECRET }}
          CLOUD_AWS_CREDENTIALS_ACCESS_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_ACCESS_KEY }}
          CLOUD_AWS_CREDENTIALS_SECRET_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_SECRET_KEY }}
          CLOUD_AWS_REGION_STATIC: ${{ secrets.CLOUD_AWS_REGION_STATIC }}
          CLOUD_AWS_S3_BUCKET: ${{ secrets.CLOUD_AWS_S3_BUCKET }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_REPO }}
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} <<EOF
            cd /home/ubuntu/CrystalRose-back

            echo "[ENV] 환경 파일 설정"
            rm -f .env
            touch .env
            echo "DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME" >> .env
            echo "DOCKERHUB_REPO=$DOCKERHUB_REPO" >> .env
            echo "SPRING_JWT_SECRET=$SPRING_JWT_SECRET" >> .env
            echo "CLOUD_AWS_CREDENTIALS_ACCESS_KEY=$CLOUD_AWS_CREDENTIALS_ACCESS_KEY" >> .env
            echo "CLOUD_AWS_CREDENTIALS_SECRET_KEY=$CLOUD_AWS_CREDENTIALS_SECRET_KEY" >> .env
            echo "CLOUD_AWS_REGION_STATIC=$CLOUD_AWS_REGION_STATIC" >> .env
            echo "CLOUD_AWS_S3_BUCKET=$CLOUD_AWS_S3_BUCKET" >> .env

            echo "[DEPLOY] 배포 스크립트 실행"
            chmod +x ./deploy.sh
            ./deploy.sh
          EOF
